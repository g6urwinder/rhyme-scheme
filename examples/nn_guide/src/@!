extern crate rand;
use rand::Rng;

pub fn analytic_gradient() {
    
    fn forwardMultiplyGate(x: f64, y: f64) -> f64 {
        x*y
    };

    let mut x: f64 = -2.0;
    let mut y: f64 = 3.0;
    let out = forwardMultiplyGate(x, y);
    let x_gradient = y;
    let y_gradient = x;

    let step_size = 0.01;
    x = x + step_size*x_gradient;
    y = y + step_size*y_gradient;
    let out_new = forwardMultiplyGate(x, y);

    println!("OLD OUTPUT #{:?} NEW OUTPUT {:?}", out, out_new)
}

#[cfg(test)]
mod tests {
    
    use super::*;
    
    #[test]
    fn test_analytic_gradient() {
        
        analytic_gradient()
    }
}
